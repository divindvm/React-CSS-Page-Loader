{"version":3,"file":"index.esm.js","sources":["../PageLoader.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { motion } from 'framer-motion'\nimport \"./PageLoader.scss\";\n\n// Auto-import CSS when component is used\nif (typeof window !== 'undefined') {\n  // Check if CSS is already loaded\n  const existingLink = document.querySelector('link[href*=\"PageLoader\"]');\n  if (!existingLink) {\n    // This will be handled by the build system, but we ensure it's available\n    console.log('PageLoader CSS should be imported automatically');\n  }\n}\n\n// Simple route change detection - each PageLoader instance will trigger loading on mount\n\n// Animation configurations - now dynamic based on duration\nconst createTextAnimation = (duration) => ({\n    initial: {\n        opacity: 1,\n    },\n    enter: {\n        opacity: 0,\n        left: -100,\n        transition: {duration: .75, delay: (duration - 1500) / 1000, ease: [0.76, 0, 0.24, 1]},\n        transitionEnd: {left: \"47.5%\"}\n    },\n    exit: {\n        opacity: 1,\n        left: \"40%\",\n        transition: {duration: .5, ease: [0.33, 1, 0.68, 1]}\n    }\n})\n\nconst createCurveAnimation = (initialPath, targetPath, duration) => ({\n    initial: {\n        d: initialPath\n    },\n    enter: {\n        d: targetPath,\n        transition: {duration: .75, delay: (duration - 1500) / 1000, ease: [0.76, 0, 0.24, 1]}\n    },\n    exit: {\n        d: initialPath,\n        transition: {duration: .75, ease: [0.76, 0, 0.24, 1]}\n    }\n})\n\nconst createTranslateAnimation = (duration) => ({\n    initial: {\n        left: \"-300px\"\n    },\n    enter: {\n        left: \"-100vw\",\n        transition: {duration: .75, delay: (duration - 1500) / 1000, ease: [0.76, 0, 0.24, 1]},\n        transitionEnd: {\n            left: \"100vw\"\n        }\n    },\n    exit: {\n        left: \"-300px\",\n        transition: {duration: .75, ease: [0.76, 0, 0.24, 1]}\n    }\n})\n\nconst routes = {\n    \"/\": \"Home\",\n    \"/about\": \"About\",\n    \"/contact\": \"Contact\"\n}\n\nconst anim = (variants) => {\n    return {\n        variants,\n        initial: \"initial\",\n        animate: \"enter\",\n        exit: \"exit\"\n    }\n}\n\n\nexport default function PageLoader({children, backgroundColor=\"#ffffff\", loadingText=\"Loading...\", animationType=\"circle\", duration=3000, isLoading: externalIsLoading, onLoadingComplete, customLoader, customStyles, autoRouteLoading=true, onRouteChange}) {\n    // const router = useRouter();\n    const [dimensions, setDimensions] = useState({\n        width: null,\n        height: null\n    })\n    \n    const [internalIsLoading, setInternalIsLoading] = useState(true)\n    const [showSwipeAnimation, setShowSwipeAnimation] = useState(false)\n    const [showLoadingCircle, setShowLoadingCircle] = useState(true)\n    \n    // Use external loading state if provided, otherwise use internal state\n    const isLoading = externalIsLoading !== undefined ? externalIsLoading : internalIsLoading\n\n    // Route change detection effect\n    useEffect(() => {\n        if (autoRouteLoading && externalIsLoading === undefined) {\n            console.log('PageLoader mounted, setting up route detection');\n            \n            // Set initial loading state\n            setInternalIsLoading(true);\n            setShowSwipeAnimation(true);\n            setShowLoadingCircle(true);\n            \n            // Listen for route changes\n            const handleRouteChange = () => {\n                console.log('Route changed to:', window.location.pathname);\n                setInternalIsLoading(true);\n                setShowSwipeAnimation(true);\n                setShowLoadingCircle(true);\n                \n                if (onRouteChange) {\n                    onRouteChange();\n                }\n            };\n            \n            // Listen for popstate (back/forward navigation)\n            window.addEventListener('popstate', handleRouteChange);\n            \n            // Override history methods to catch programmatic navigation\n            const originalPushState = history.pushState;\n            const originalReplaceState = history.replaceState;\n            \n            history.pushState = function(...args) {\n                originalPushState.apply(history, args);\n                setTimeout(handleRouteChange, 0);\n            };\n            \n            history.replaceState = function(...args) {\n                originalReplaceState.apply(history, args);\n                setTimeout(handleRouteChange, 0);\n            };\n            \n            // Cleanup\n            return () => {\n                window.removeEventListener('popstate', handleRouteChange);\n                history.pushState = originalPushState;\n                history.replaceState = originalReplaceState;\n            };\n        }\n    }, [autoRouteLoading, externalIsLoading, onRouteChange]);\n\n    // Prevent scroll when loading\n    useEffect(() => {\n        if (isLoading) {\n            // Prevent scrolling\n            document.body.style.overflow = 'hidden'\n        } else {\n            // Restore scrolling\n            document.body.style.overflow = 'unset'\n        }\n        \n        // Cleanup on unmount\n        return () => {\n            document.body.style.overflow = 'unset'\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        console.log('PageLoader mounted, isLoading:', isLoading)\n        \n        function resize(){\n            setDimensions({\n                width: window.innerWidth,\n                height: window.innerHeight\n            })\n        }\n        resize();\n        window.addEventListener(\"resize\", resize)\n        \n        // Show swipe animation when loading starts\n        if (isLoading) {\n            setShowSwipeAnimation(true)\n            setShowLoadingCircle(true)\n            \n            // Hide loading circle before swipe animation completes\n            const hideCircleTimer = setTimeout(() => {\n                setShowLoadingCircle(false)\n            }, Math.max(0, duration - 1500)) // Hide circle 1.5 seconds before loading completes\n            \n            // Only set internal timer if no external loading state is provided\n            if (externalIsLoading === undefined) {\n                const loadingTimer = setTimeout(() => {\n                    console.log('Loading completed, setting isLoading to false')\n                    setInternalIsLoading(false)\n                }, duration)\n                \n                return () => {\n                    window.removeEventListener(\"resize\", resize);\n                    clearTimeout(hideCircleTimer);\n                    clearTimeout(loadingTimer);\n                }\n            }\n            \n            return () => {\n                window.removeEventListener(\"resize\", resize);\n                clearTimeout(hideCircleTimer);\n            }\n        }\n        \n        return () => {\n            window.removeEventListener(\"resize\", resize);\n        }\n    }, [duration, externalIsLoading, isLoading])\n    \n    // Handle external loading completion\n    useEffect(() => {\n        if (externalIsLoading === false && onLoadingComplete) {\n            onLoadingComplete();\n        }\n    }, [externalIsLoading, onLoadingComplete])\n    \n    // Reset animations when loading completes\n    useEffect(() => {\n        if (!isLoading) {\n            // Reset immediately when loading completes\n            setShowSwipeAnimation(false)\n            setShowLoadingCircle(true) // Reset for next time\n        }\n    }, [isLoading])\n    \n    console.log('PageLoader render - isLoading:', isLoading, 'showSwipeAnimation:', showSwipeAnimation, 'showLoadingCircle:', showLoadingCircle, 'route:', window?.location?.pathname)\n    \n    // Create dynamic animations based on duration\n    const textAnimation = createTextAnimation(duration)\n    const translateAnimation = createTranslateAnimation(duration)\n    \n    return (\n    <div className='page curve' style={{backgroundColor}}>\n       <div style={{opacity: dimensions.width == null ? 1 : 0}} className='background'/>\n       \n        {/* CSS Loading Animation */}\n        {isLoading && showLoadingCircle && (\n            <div className=\"loading-container\" style={customStyles}>\n                {animationType === 'circle' ? (\n                    <div className=\"loading-circle\">\n                        <div className=\"spinner\"></div>\n                    </div>\n                ) : animationType === 'text' ? (\n                    <div className=\"loading-text\">\n                        {loadingText}\n                    </div>\n                ) : animationType === 'custom' && customLoader ? (\n                    <div className=\"custom-loader\">\n                        {customLoader}\n                    </div>\n                ) : (\n                    <div className=\"loading-text\">\n                        {loadingText}\n                    </div>\n                )}\n            </div>\n        )}\n       \n       {/* Swipe Animation - only show when loading */}\n       {showSwipeAnimation && isLoading && (\n           <>\n               <motion.p className='route' {...anim(textAnimation)}>\n                    {/* {routes[router.route]} */}\n                    page load\n                </motion.p>\n                {dimensions.width != null && <SVG {...dimensions} duration={duration}/>}\n           </>\n       )}\n        {!isLoading && children}\n    </div>\n    )\n}\n\nconst SVG = ({height, width, duration}) => {\n\n    const initialPath = `\n        M300 0 \n        Q0 ${height / 2} 300 ${height}\n        L${width + 300} ${height}\n        Q${width + 600} ${height / 2} ${width + 300} 0\n        L0 0\n    `\n\n    const targetPath = `\n        M300 0\n        Q0 ${height / 2} 300 ${height}\n        L${width} ${height}\n        Q${width} ${height / 2} ${width} 0\n        L0 0\n    `\n\n    const translateAnimation = createTranslateAnimation(duration)\n    const curveAnimation = createCurveAnimation(initialPath, targetPath, duration)\n\n    return (\n        <motion.svg {...anim(translateAnimation)}>\n            <motion.path {...anim(curveAnimation)} />\n        </motion.svg>\n    )\n}\n"],"names":["window","existingLink","document","querySelector","console","log","createTextAnimation","duration","initial","opacity","enter","left","transition","delay","ease","transitionEnd","exit","createCurveAnimation","initialPath","targetPath","d","createTranslateAnimation","anim","variants","animate","PageLoader","children","backgroundColor","loadingText","animationType","isLoading","externalIsLoading","onLoadingComplete","customLoader","customStyles","autoRouteLoading","onRouteChange","dimensions","setDimensions","useState","width","height","internalIsLoading","setInternalIsLoading","showSwipeAnimation","setShowSwipeAnimation","showLoadingCircle","setShowLoadingCircle","undefined","useEffect","handleRouteChange","location","pathname","addEventListener","originalPushState","history","pushState","originalReplaceState","replaceState","args","apply","setTimeout","removeEventListener","body","style","overflow","resize","innerWidth","innerHeight","hideCircleTimer","Math","max","loadingTimer","clearTimeout","textAnimation","React","createElement","className","Fragment","motion","p","_extends","SVG","translateAnimation","curveAnimation","svg","path"],"mappings":"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"}